export component CustomScrollView {
    in property <bool> enabled: true;
    out property <length> visible-width <=> flickable.width;
    out property <length> visible-height <=> flickable.height;
    in-out property <length> viewport-width <=> flickable.viewport-width;
    in-out property <length> viewport-height <=> flickable.viewport-height;
    in-out property <length> viewport-x <=> flickable.viewport-x;
    in-out property <length> viewport-y <=> flickable.viewport-y;
    in property <bool> mouse-drag-pan-enabled <=> flickable.interactive;
    in-out property <bool> has-focus;
    callback scrolled <=> flickable.flicked;

    min-height: 50px;
    min-width: 50px;
    horizontal-stretch: 1;
    vertical-stretch: 1;
    preferred-height: 100%;
    preferred-width: 100%;

    property <length> vvalue <=> flickable.viewport-y;
    property <length> hvalue <=> flickable.viewport-x;
    property <length> vmaximum: flickable.viewport-height - flickable.height;
    property <length> hmaximum: flickable.viewport-width - flickable.width;

    flickable := Flickable {
        interactive: false;
        width: parent.width;
        height: parent.height;

        @children
    }

    public function scroll(delta: length, horizontal: bool) {
        if (horizontal) {
            root.hvalue = max(-root.hmaximum, min(0px, root.hvalue + delta));
        } else {
            root.vvalue = max(-root.vmaximum, min(0px, root.vvalue + delta));
        }
    }
}

export component ListItem {
    in property <bool> is-selected;
    in property <StandardListViewItem> item;
    in property <bool> has-focus;
    in property <bool> has-hover;
    in property <bool> pressed;
    in property <int> index;
    in property <length> pressed-x;
    in property <length> pressed-y;

    min-width: i-layout.min-width;
    min-height: max(25px, i-layout.min-height);
    vertical-stretch: 0;
    horizontal-stretch: 1;
    accessible-role: list-item;
    accessible-label: root.item.text;
    accessible-item-selectable: true;
    accessible-item-selected: root.is-selected;
    accessible-item-index: root.index;

    states [
        pressed when root.pressed : {
            i-selector.color: black;
            i-text.color: white;
            i-background.background: is-selected ? black : white;
        }
        is-selected when root.is-selected : {
            i-text.color: white;
            i-background.background: black;
            i-selector.height: 16px;
        }
    ]

    if (root.has-focus) : Rectangle {
        border-radius: 4px;
        background: black;
    }

    i-background := Rectangle {
        width: root.width - 6px;
        background: transparent;
        border-radius: 4px;


        i-layout := VerticalLayout {
            padding-left: 16px;
            padding-right: 16px;
            spacing: 7px;

            i-text := Text {
                text: root.item.text;
                overflow: elide;
                vertical-alignment: center;
                wrap: word-wrap;
                font-size: 20px;
            }
        }

        i-selector := Rectangle {
            x: 3px;
            y: (parent.height - self.height) / 2;
            width: 3px;
            height: 0px;
            background: white;
            border-radius: 2px;
        }
    }

    @children
}

export component ListView inherits CustomScrollView {
    @children
    accessible-role: list;
}

export component StandardListViewBase inherits ListView {
    in property <[StandardListViewItem]> model;
    in-out property <int> current-item: -1;

    callback current-item-changed(current-item: int);
    callback item-pointer-event(item: int, event: PointerEvent, position: Point);

    public function set-current-item(index: int) {
        if index < 0 || index >= model.length || index == root.current-item {
            return;
        }

        bring-into-view(index);

        current-item = index;
        focus-item = index;
        current-item-changed(current-item);
    }

    public function return-height(height:length) {
        debug(height);
    }

    private property <length> item-height: self.viewport-height / self.model.length;
    private property <int> into-view-item: 0;
    private property <length> into-view-item-y: root.item-y(root.into-view-item);
    private property <length> current-item-y: root.item-y(root.focus-item);
    private property <int> focus-item: 0;
    private property <bool> has-item-been-selected: false;

    accessible-delegate-focus: root.focus-item;
    accessible-item-count: root.model.length;

    pure function first-visible-item() -> int {
        return min(root.model.length - 1, max(0, round(-root.viewport-y / root.item-height)));
    }

    pure function last-visible-item() -> int {
        return min(root.model.length - 1, max(0, round((-root.viewport-y + root.height - root.item-height) / root.item-height)));
    }

    pure function item-y(index: int) -> length {
        return root.viewport-y + index * root.item-height;
    }

    pure function item-at-y(y: length) -> int {
        return min(root.model.length - 1, max(0, round(y / root.item-height)));
    }

    function bring-into-view(index: int) {
        if (index < 0 || index >= model.length) {
            return;
        }

        into-view-item = index;

        if (into-view-item-y < 0) {
            self.viewport-y += 0 - into-view-item-y;
        }

        if (into-view-item-y + item-height > self.visible-height) {
            self.viewport-y -= into-view-item-y + item-height - self.visible-height;
        }
    }

    protected function focus-up() {
        root.set-focus-item(root.focus-item - 1);
    }

    protected function focus-page-up() {
        if root.focus-item != root.first-visible-item() {
            root.set-focus-item(root.first-visible-item())
        } else {
            root.set-focus-item(root.item-at-y(root.item-y(root.first-visible-item()) - root.height));
        }
    }

    protected function focus-first() {
        root.set-focus-item(0);
    }

    protected function focus-down() {
        root.set-focus-item(root.focus-item + 1);
    }

    protected function focus-page-down() {
        if root.focus-item != root.last-visible-item() {
            root.set-focus-item(root.last-visible-item())
        } else {
            root.set-focus-item(root.item-at-y(root.item-y(root.last-visible-item()) + root.height));
        }
    }

    protected function focus-last() {
        root.set-focus-item(root.model.length - 1);
    }

    protected function select-focus-item() {
        root.set-current-item(root.focus-item);
    }

    protected function focus-current-item() {
        if root.current-item == -1 && !root.has-item-been-selected && root.model.length > 0 {
            root.set-current-item(0);
        }
        root.has-item-been-selected = true;

        if (root.current-item-y + root.item-height < 0
            || root.current-item-y > root.height) {
                root.focus-item = root.first-visible-item();
        }
    }

    protected function toggle-focus-item-selection() {
        if (root.current-item == root.focus-item) {
            root.current-item = -1;
        } else {
            root.select-focus-item();
        }
    }

    protected function set-focus-item(index: int) {
        root.focus-item = min(root.model.length - 1, max(0, index));
        root.bring-into-view(root.focus-item);
    }

    for item[index] in root.model : ListItem {
        height: self.min-height;
        item: item;
        index: index;
        is-selected: index == root.current-item;
        has-focus: root.has-focus && index == root.focus-item;

        init => {
                root.return-height(self.height);
            }
    }
    cache-rendering-hint: true;
}

export component StandardListView inherits StandardListViewBase {
    forward-focus: i-focus-scope;

    i-focus-scope := FocusScope {
        x: 0;
        width: 0;  // Do not react on clicks

        focus-changed-event => {
            root.focus-current-item();
            root.has-focus = self.has-focus;
        }

        key-pressed(event) => {
            if (event.text == Key.UpArrow) {
                root.focus-up();
                if (!event.modifiers.control) {
                    root.select-focus-item();
                }
                return accept;
            } else if (event.text == Key.PageUp) {
                root.focus-page-up();
                if (!event.modifiers.control) {
                    root.select-focus-item();
                }
                return accept;
            } else if (event.text == Key.Home) {
                root.focus-first();
                if (!event.modifiers.control) {
                    root.select-focus-item();
                }
                return accept;
            } else if (event.text == Key.DownArrow) {
                root.focus-down();
                if (!event.modifiers.control) {
                    root.select-focus-item();
                }
                return accept;
            } else if (event.text == Key.PageDown) {
                root.focus-page-down();
                if (!event.modifiers.control) {
                    root.select-focus-item();
                }
                return accept;
            } else if (event.text == Key.End) {
                root.focus-last();
                if (!event.modifiers.control) {
                    root.select-focus-item();
                }
                return accept;
            } else if (event.text == Key.Space) {
                if (event.modifiers.control) {
                    root.toggle-focus-item-selection();
                } else {
                    root.select-focus-item();
                }
                return accept;
            }
            reject
        }
    }
}