import { CustomScrollView, ListView } from "scroll-view.slint";
//import { ListView } from "std-widgets.slint";
import "Quantico-Regular-linegap5.ttf";

export global Adapter {
    in property <bool> title_enabled: true;
    in property <string> title_text;
    in property <string> main_text;

    in property <bool> buttons_shown: false;
    in-out property <length> scroll;
    in-out property <length> scroll_viewport_height;
    in property <bool> show_menu: false;
}

export struct ButtonItem {
    button_name: string,
}

export component GeneralPage inherits Window {
    width: 200px;
    height: 200px;

    in-out property <[ButtonItem]> button_items;
    in-out property <int> selected_index: 0;
    property <length> scroll_y: 20px;

    default-font-family: "Quantico";


    public function scrollTheScroll(delta: length, horizontal: bool) {
        scrollView.scroll(delta,horizontal);
    }

    public function handleUpButton() {
        if !Adapter.show_menu {
            root.scrollTheScroll(10px, false);
        } else {
            if selected_index != -1 {
                selected_index = selected_index - 1;
                                                if selected_index != 0 {
                scroll_y += 20px;
                }
            }
        }
    }

    public function handleDownButton() {
        if !Adapter.show_menu {
            root.scrollTheScroll(-10px, false);
        } else {
            if selected_index < button_items.length - 1 {
                selected_index += 1;
                                                if selected_index != 0 {
                scroll_y -= 20px;
                }
            }
        }
    }

    callback button_pressed(string);

    public function handleMenuButton() {
        if !Adapter.show_menu {
            Adapter.show_menu = true;
        } else {
            root.button_pressed(button_items[selected_index].button_name);
            Adapter.show_menu = false;
        }
    }

    callback key_pressed(string);
    forward-focus: my-key-handler;

    my-key-handler := FocusScope {
        key-pressed(event) => {
            root.key_pressed(event.text);
            accept
        }

    scrollView := CustomScrollView {
        viewport-y: Adapter.scroll;

        VerticalLayout {
            padding: 3px;
            spacing: 1px;
            alignment: start;
            preferred-height: Adapter.scroll_viewport_height;

            if Adapter.title_enabled: Text {
                text: Adapter.title_text;
                overflow: elide;
                vertical-alignment: top;
                wrap: word-wrap;
                font-size: 20px;
            }

            if Adapter.title_enabled: Rectangle {
                height: 3px;
                background: black;
            }

            Text {
                text: Adapter.main_text;
                overflow: elide;
                vertical-alignment: top;
                wrap: word-wrap;
                font-size: 20px;
            }
        }
    }
    if Adapter.show_menu: Rectangle {
        background: white;
        border-width: 2px;
        border-radius: 10px;
        border-color: black;
        clip: false;
        width: root.width * 0.8;
        height: root.height * 0.9;
        x: (root.width - self.width) / 2;
        y: (root.height - self.height) / 2;
    }


        if Adapter.show_menu: list := ListView {
        viewport-y <=> scroll_y;
        width: root.width * 0.75;
        height: root.height * 0.85;
        x: (root.width - self.width) / 2;
        y: (root.height - self.height) / 2;

            for data[idx] in root.button_items: Rectangle {
                width: parent.width;
                background: idx == root.selected_index ? black : transparent;
                text := Text {
                    text: data.button_name;
                    color: idx == root.selected_index ? white : black;
                    wrap: word-wrap;
                    font-size: 20px;
                    width: parent.width * 0.95;
                    padding: 10px;
                }
            }
        }
    }
}

