import "./FiraSans-Medium.ttf";

struct Date {
    year: int,
    month: int, // 1-12
    day: int,   // 1-31
}

enum ColorScheme {
    dark,
    light,
}

global Palette {
    // Basic Palette for styling, assuming dark mode for now
    // These are properties of the global object, not fields of a struct
    in property <ColorScheme> color-scheme: ColorScheme.dark;
    in property <brush> control-background: #ffffff;
    in property <brush> border: #ffffff;
    in property <brush> accent-background: #000000;
    in property <brush> accent-foreground: #ffffff;
    in property <brush> foreground: #000000;
    in property <brush> state-brush: #000000;
    in property <brush> state-brush-secondary: #ffffff;
}

component Button inherits Rectangle {
    in property <string> text;
    in property <float> scale: 1.0;
    property <brush> foreground: #000000;
    callback clicked;

    height: 30px * root.scale;
    width: 80px * root.scale;
    border-radius: 5px * root.scale;
    background: #ffffff; // Set background directly on the root Rectangle

    Text {
        text: root.text;
        color: root.foreground;
        horizontal-alignment: center;
        vertical-alignment: center;
        width: parent.width;
        height: parent.height;
    }

    TouchArea {
        clicked => {
            root.clicked();
        }
    }
}

export component DatePicker inherits Window {
    width: 200px;
    height: 200px;
    default-font-family: "Fira Sans";
    forward-focus: my-key-handler;

    in-out property <Date> date <=> current-date;

    property <Date> current-date: { year: 2025, month: 9, day: 12 }; // Default to today's date
    property <int> selected-day: current-date.day;

    property <brush> state: #000000;
    property <brush> state-secondary: #ffffff;

    callback canceled();
    callback accepted(date: Date);

    in property <float> master-scale: 0.623;

    // Helper function to get the number of days in a month
    function days-in-month(year: int, month: int) -> int {
        if month == 2 {
            if (Math.mod(year, 4) == 0 && (Math.mod(year, 100) != 0 || Math.mod(year, 400) == 0)) {
                return 29; // Leap year
            } else {
                return 28;
            }
        } else if month == 4 || month == 6 || month == 9 || month == 11 {
            return 30;
        } else {
            return 31;
        }
    }

    // Helper function to get the day of the week for the first day of the month
    // Returns 0 for Sunday, 1 for Monday, ..., 6 for Saturday
    function first-day-of-month(year: int, month: int) -> int {
        let q = 1; // First day of the month

        let m_val = month <= 2 ? month + 12 : month;
        let y_val = month <= 2 ? year - 1 : year;

        // Zeller's congruence (simplified form / Gauss's algorithm variant)
        // h = (q + floor(13*(m_val+1)/5) + y_val + floor(y_val/4) - floor(y_val/100) + floor(y_val/400)) mod 7
        let h = Math.mod((q + (13 * (m_val + 1)) / 5 + y_val + y_val / 4 - y_val / 100 + y_val / 400), 7);

        // Adjust result to be 0 for Sunday, 1 for Monday, ..., 6 for Saturday
        // Zeller's congruence returns 0 for Saturday, 1 for Sunday, ..., 6 for Friday
        // So, (h + 6) % 7 will map Saturday (0) to 6, Sunday (1) to 0, etc.
        let original_day_index = Math.mod((h + 6), 7); // 0=Sun, 1=Mon, ..., 6=Sat
        return Math.mod((original_day_index - 1 + 7), 7); // 0=Mon, 1=Tue, ..., 6=Sun
    }

    VerticalLayout {
        width: root.width;
        height: root.height;
        my-key-handler := FocusScope {
            key-pressed(event) => {
                if event.text == "w" {
                    current-date.day = current-date.day + 1;
                    if (current-date.day > root.days-in-month(current-date.year, current-date.month)) {
                        current-date.day = 1;
                        current-date.month = current-date.month + 1;
                        if (current-date.month > 12) {
                            current-date.month = 1;
                            current-date.year = current-date.year + 1;
                        }
                    }
                } else if event.text == "s" {
                    current-date.day = current-date.day - 1;
                    if (current-date.day < 1) {
                        current-date.month = current-date.month - 1;
                        if (current-date.month < 1) {
                            current-date.month = 12;
                            current-date.year = current-date.year - 1;
                        }
                        current-date.day = root.days-in-month(current-date.year, current-date.month);
                    }
                } else if event.text == "e" {
                    current-date.month = current-date.month + 1;
                    if (current-date.month > 12) {
                        current-date.month = 1;
                        current-date.year = current-date.year + 1;
                    }
                } else if event.text == "d" {
                    current-date.month = current-date.month - 1;
                    if (current-date.month < 1) {
                        current-date.month = 12;
                        current-date.year = current-date.year - 1;
                    }
                }
                return EventResult.accept;
            }
        }

        Rectangle {
            width: root.width;
            height: root.height;
            background: Palette.control-background;

            VerticalLayout {
                padding: 8px * root.master-scale;

                // Month and Year Navigation
                HorizontalLayout {
                    spacing: 10px * root.master-scale;
                    alignment: center;

                    Button {
                        text: "<";
                        scale: root.master-scale;
                        clicked => {
                            current-date.month = current-date.month - 1;
                            if (current-date.month == 0) {
                                current-date.month = 12;
                                current-date.year = current-date.year - 1;
                            }
                        }
                    }

                    Text {
                        text: "\{current-date.month}/\{current-date.year}";
                        font-size: 20px * root.master-scale;
                        color: Palette.foreground;
                        horizontal-alignment: center;
                        vertical-alignment: center;
                        width: 100px * root.master-scale;
                    }

                    Button {
                        text: ">";
                        scale: root.master-scale;
                        clicked => {
                            current-date.month = current-date.month + 1;
                            if (current-date.month == 13) {
                                current-date.month = 1;
                                current-date.year = current-date.year + 1;
                            }
                        }
                    }
                }

                // Calendar Grid
                VerticalLayout {
                    spacing: 4px * root.master-scale;

                    // Weekday headers
                    HorizontalLayout {
                        spacing: 4px * root.master-scale;
                        for day-name in ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"]: Text {
                            text: day-name;
                            color: Palette.foreground;
                            font-size: 21px * root.master-scale;
                            horizontal-alignment: center;
                            vertical-alignment: center;
                            width: 40px * root.master-scale; // Approximate width for each day cell
                        }
                    }

                    // Days of the month
                    for row-index in 6: HorizontalLayout {
                        spacing: 4px * root.master-scale;
                        for col-index in 7: Rectangle {
                            property <int> i: row-index * 7 + col-index;
                            property <int> day-number: i - root.first-day-of-month(root.current-date.year, root.current-date.month) + 1;
                            property <bool> is-valid-day: day-number > 0 && day-number <= root.days-in-month(root.current-date.year, root.current-date.month);
                            property <bool> is-selected: is-valid-day && day-number == root.selected-day;
                            property <bool> is-today: is-valid-day && day-number == 12 && root.current-date.month == 9 && root.current-date.year == 2025; // Hardcoded for now

                            background: is-selected ? Palette.accent-background : (is-today ? Palette.border : Palette.control-background);
                            border-radius: 4px * root.master-scale;
                            width: 40px * root.master-scale; // Approximate width for each day cell
                            height: 40px * root.master-scale;

                            TouchArea {
                                clicked => {
                                    if (parent.is-valid-day) {
                                        root.selected-day = parent.day-number;
                                        root.current-date.day = parent.day-number;
                                    }
                                }
                            }

                            Text {
                                text: is-valid-day ? "\{day-number}" : "";
                                color: is-selected ? Palette.accent-foreground : Palette.foreground;
                                font-size: 25px * root.master-scale;
                                horizontal-alignment: center;
                                vertical-alignment: center;
                            }
                        }
                    }
                }
            }
        }
    }
}
